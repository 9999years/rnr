name: Release

on:
  push:
    tags: ["*"]

env:
  PROJECT_NAME: rnr
  CARGO_TERM_COLOR: always
  ARTIFACT_NAME: artifacts

jobs:
  build-artifacts:
    name: Build a release artifacts
    runs-on: ${{ matrix.build.os }}
    strategy:
      fail-fast: false
      matrix:
        build:
          # Linux
          - os: "ubuntu-latest"
            target: "x86_64-unknown-linux-gnu"
            cross: false
          - os: "ubuntu-latest"
            target: "x86_64-unknown-linux-musl"
            cross: true
          - os: "ubuntu-latest"
            target: "aarch64-unknown-linux-gnu"
            cross: true
          - os: "ubuntu-latest"
            target: "armv7-unknown-linux-gnueabihf"
            cross: true
          # MacOS
          - os: "macos-latest"
            target: "x86_64-apple-darwin"
            cross: false
          # Windows
          - os: "windows-latest"
            target: "x86_64-pc-windows-msvc"
            cross: false
          - os: "windows-latest"
            target: "x86_64-pc-windows-gnu"
            cross: false

    env:
      BUILD_DIR: "build"
      TARGET: ${{ matrix.build.target }}
      USE_CROSS: ${{ matrix.build.cross }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get the version
        id: version
        shell: bash
        run: |
          echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}

      - name: Configure toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: ${{ env.TARGET }}
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ env.USE_CROSS }}
          command: build
          args: --target=${{ env.TARGET }} --release --verbose

      - name: Create package
        id: package
        shell: bash
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          workflow_dir=$(pwd) # Avoid ${GITHUB_WORKFLOW} since Windows mixes path styles.
          package_name="${PROJECT_NAME}-${VERSION}-${TARGET}"
          ext=".tag.gz"
          deploy_dir="${BUILD_DIR}/${package_name}"

          # Create deployment directory
          mkdir -p "${deploy_dir}"
          mkdir -p "${deploy_dir}/completion"

          # Copy files
          cp "target/${TARGET}/release/${PROJECT_NAME}"             "${deploy_dir}/"
          cp "target/${TARGET}/release/build/rnr"-*/out/"_rnr"      "${deploy_dir}/completion/"
          cp "target/${TARGET}/release/build/rnr"-*/out/"rnr.bash"  "${deploy_dir}/completion/"
          cp "target/${TARGET}/release/build/rnr"-*/out/"rnr.fish"  "${deploy_dir}/completion/"
          cp "target/${TARGET}/release/build/rnr"-*/out/"_rnr.ps1"  "${deploy_dir}/completion/"
          cp README.md "${deploy_dir}"
          cp LICENSE "${deploy_dir}"

          # Archive
          pushd "${BUILD_DIR}"
          tar czf "${workflow_dir}/${package_name}${ext}" "${package_name}"/*
          popd
          rm -r "${BUILD_DIR}"

          echo ::set-output name=name::${package_name}${ext}

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: ${{ steps.package.outputs.name }}

  publish-release:
    name: Publish a new release
    runs-on: ubuntu-latest
    needs: build-artifacts
    steps:
      - name: Get the version
        id: version
        shell: bash
        run: |
          echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}

      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}/

      - name: Publish new release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.version.outputs.version }}
          artifacts: "${{ env.ARTIFACT_NAME }}/*"
